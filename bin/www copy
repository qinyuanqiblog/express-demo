#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express-demo:server');
var http = require('http');

var log = require('consola');
const path = require('path');
const os = require('os');
const localHost = getLocalIps()[0];
const commonUtils = require('../utils');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
log.success(' Your application is running here:http://' + localHost + ':' + port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


const axios = require('axios')
const cheerio = require('cheerio')
const fs = require('fs');


// axios.get('https://wallhaven.cc/w/28kdom').then(res=>{

// }).catch(err=>{

// })

const reptileUrl = 'https://wallhaven.cc/toplist?page='
const saveDir = 'E:/myExpressDownload/toplist2/'
let currentPage = 6
const maxPage = 141

init()

/**
 * 爬取主程序入口
 * @param {number}  currentPage   一组数据有多个
 * @param {number}  maxPage   一组数据有多个
 * @param {string}  saveDir   一组数据有多个
 */
async function init() {
    log.info('主程序开始启动，请您耐心等待~')
    log.info(`开始爬取${reptileUrl}的图片`)
    log.info(`文件将会被保存到以下地址中：${saveDir}`)

    // 判断本地存储文件夹是否存在
    if (!fs.existsSync(saveDir)) {
        log.info('目标文件不存在，开始创建新的文件夹~')
        fs.mkdirSync(saveDir);
    }

    if (currentPage > maxPage) {
        log.error('超出最大页数，程序自动终止')
        return false
    }
    const hrefList = []
    try {
        log.info(`开始爬取第${currentPage}页`)
        const websiteHtml = await axios.get(`${reptileUrl}${currentPage}`)
        const html = websiteHtml.data
        const $ = cheerio.load(html);
        $('.preview').each((i, v) => {
            const href = v.attribs.href
            href && hrefList.push(href)
        })
        log.info('已经抓取到所有的a连接~')
        log.info('准备下载咯~')
        log.info(`hrefList 个数==>`, hrefList.length)

       download(hrefList)

        
    } catch (error) {
        log.error(`爬取错误，错误信息如下==>`, error)
    }
}


async function download(hrefList) {
    if (!hrefList.length) {
        log.error('没有图片了，程序终止咯~')
    }
  // 有些网站限制不能发送太多请求，一般10个都可以过
  const resultList = await findPicture(hrefList.splice(0, 10))
  const downloadArray = resultList.map((v, i) => {
      const $ = cheerio.load(v.data);
      const currentImg = $('.fit img')
      const url = currentImg.attr('src')
      const fileName = currentImg.attr('data-wallpaper-id')
      return {
          url,
          fileName
      }
  })
  log.info('图片解析完毕，已经抓取到所有的地址~')
  await downloadPicture(downloadArray)
  download(hrefList)
  sleep()
}

function sleep() {
    currentPage++
    const sleepTimeout = commonUtils.getRandomNumber(1, 20)
    let copyTimeout = sleepTimeout
    log.info(`爬太多了，有点累了，休息${sleepTimeout}秒，后再继续😄`)
    const logTimer = setInterval(() => {
        if (copyTimeout <= 1) {
            clearInterval(logTimer)
        }
        log.success(`休息${--copyTimeout}秒后开始怕爬第${currentPage}页`)
    }, 1000);
    setTimeout(() => {
        init()
    }, sleepTimeout * 1000);
}

async function findPicture(aTagArray) {
    log.info('开始解析图片内容~')
    const array = aTagArray.map(v => axios.get(v))
    return Promise.all(array)
}


function downloadPicture(pictureArray) {
    log.info('开始发送请求下载图片~')
    return pictureArray.reduce((accumulator, currentValue, currentIndex, array) => {
        const promise = axios.get(`${currentValue.url}`, {
            responseType: 'stream'
        }).then(res => {
            const result = res.data.pipe(fs.createWriteStream(`${saveDir}${currentValue.fileName}.png`))
            log.success(`成功保存图片到本地，保存位置==>${saveDir}${currentValue.fileName}.png`)
        })
        accumulator.push(promise)
        return accumulator
    }, [])
}







/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}

/**
 *获取本地IP
 *
 * @param {boolean}  是否显示ipb6
 * @returns {object} 包含Ip的数组
 *
 * console.log('本机ip地址(不包括Ipv6):', getLocalIps());
 * console.log('本机ip地址(包括Ipv6):', getLocalIps(true));
 *
 */
function getLocalIps(flagIpv6) {
    var ifaces = os.networkInterfaces();
    var ips = [];
    var func = function(details) {
        if (!flagIpv6 && details.family === 'IPv6') {
            return;
        }
        ips.push(details.address);
    };
    for (var dev in ifaces) {
        ifaces[dev].forEach(func);
    }
    return ips;
}